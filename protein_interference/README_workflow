This is the workflow used for MS based protein inference and identification analysis:

Step 1:
convert your mztab files to a idxml file using /thesis/protein_interference/mztab_to_idXML.py

Step 2:
Use PeptideIndexer from openMS
  PeptideIndexer refreshes target/decoy information and mapping of peptides to proteins.
  The target/decoy information is crucial for the @ref TOPP_FalseDiscoveryRate tool. (For FDR calculations, peptides hitting both target and decoy proteins are counted as target hits.)
  PeptideIndexer allows for ambiguous amino acids (B|J|Z|X) in the protein database and peptide sequence. 
Use refseq protein .fasta file from NIH
input example:
  PeptideIndexer -in output_step1/UWA_output1.idXML -fasta fasta1.fasta -out output_step2/UWA_output2.idXML -missing_decoy_action 'error' -IL_equivalent -enzyme:specificity 'none'

Step 3:
use PIA (Protein Interference Algorithms) to convert .idXML to .xml 
  PIA is a toolbox for MS based protein inference and identification analysis.
  PIA allows you to inspect the results of common proteomics spectrum identification search engines, combine them seamlessly and conduct statistical analyses. PIA focusses on the integrated inference algorithms, i.e. concluding the proteins from a set of identified spectra
input example:
  java -jar pia-1.4.7.jar -c -n=test1 -o=output_step3/UWA_output3.xml output_step2/UWA_output2.idXML

Step 4:
use PIA to identify the proteins from the peptide sequence. 
use the /thesis/protein_interference/UWA.JSON file
input example:
  java -jar pia-1.4.7.jar test1.json output_step3/UWA_output3.xml

Step 5:
convert your .mzid file from step 4 to a .csv file using /thesis/protein_interference/mzid_to_csv.py
  
Step 6:
compare your proteins against the /thesis/protein_interference/Higginbotham.csv file
use /thesis/protein_interference/compare.py

